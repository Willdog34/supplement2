using System;
using System.Linq;
using System.Text;
using NUnit.Framework;

public class RandomGenerator
{
    private static readonly Random _random = new Random();
    
    // Function to generate a normally distributed random number
    public static double GenerateNormalRandom(double mean, double stdDev)
    {
        double u1 = 1.0 - _random.NextDouble(); 
        double u2 = 1.0 - _random.NextDouble();
        double randStdNormal = Math.Sqrt(-2.0 * Math.Log(u1)) * Math.Sin(2.0 * Math.PI * u2);
        return mean + stdDev * randStdNormal;
    }
    
    // Function to generate a random password
    public static string GeneratePassword(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[_random.Next(s.Length)]).ToArray());
    }
    
    // Function to generate a random color tuple
    public static (string, (int, int, int)) GenerateRandomColor()
    {
        int r = _random.Next(0, 256);
        int g = _random.Next(0, 256);
        int b = _random.Next(0, 256);
        string hex = string.Format("#{0:X2}{1:X2}{2:X2}", r, g, b);
        return (hex, (r, g, b));
    }
}

[TestFixture]
public class RandomGeneratorTests
{
    [Test]
    public void TestGenerateNormalRandom()
    {
        double mean = 50, stdDev = 10;
        double[] values = new double[10000];
        for (int i = 0; i < values.Length; i++)
        {
            values[i] = RandomGenerator.GenerateNormalRandom(mean, stdDev);
        }
        double calculatedMean = values.Average();
        double calculatedStdDev = Math.Sqrt(values.Select(v => Math.Pow(v - calculatedMean, 2)).Average());
        
        Assert.AreEqual(mean, calculatedMean, 2.0, "Mean is outside expected range");
        Assert.AreEqual(stdDev, calculatedStdDev, 2.0, "Standard deviation is outside expected range");
    }
    
    [Test]
    public void TestGeneratePassword()
    {
        int length = 10;
        string password = RandomGenerator.GeneratePassword(length);
        const string validChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
        
        Assert.AreEqual(length, password.Length, "Password length is incorrect");
        Assert.IsTrue(password.All(c => validChars.Contains(c)), "Password contains invalid characters");
    }
    
    [Test]
    public void TestGenerateRandomColor()
    {
        var (hex, (r, g, b)) = RandomGenerator.GenerateRandomColor();
        
        Assert.IsTrue(hex.StartsWith("#") && hex.Length == 7, "Hex format is incorrect");
        Assert.AreEqual(hex, string.Format("#{0:X2}{1:X2}{2:X2}", r, g, b), "Hex string does not match RGB values");
        Assert.IsTrue(0 <= r && r <= 255, "Red value is out of range");
        Assert.IsTrue(0 <= g && g <= 255, "Green value is out of range");
        Assert.IsTrue(0 <= b && b <= 255, "Blue value is out of range");
    }
}
